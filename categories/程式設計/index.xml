<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程式設計 on 土豆のLife</title>
    <link>http://netjagaimo.github.io/blog_life/categories/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/</link>
    <description>Recent content in 程式設計 on 土豆のLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Wed, 11 Sep 2019 23:50:00 +0800</lastBuildDate>
    
	<atom:link href="http://netjagaimo.github.io/blog_life/categories/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用HakcMD編輯GitHub Pages部落格</title>
      <link>http://netjagaimo.github.io/blog_life/2019-09-11-hackmd_with_github_page/</link>
      <pubDate>Wed, 11 Sep 2019 23:50:00 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/blog_life/2019-09-11-hackmd_with_github_page/</guid>
      <description>利用HakcMD編輯GitHub Pages部落格 前言  前言部分僅為個人廢話，完全可以跳過沒關係喔~
 最近發現，HackMD出了一個功能，可以讓HackMD裡面的檔案與GitHub進行連結，亦即，可以用HackMD這個方便的md文件編輯器，來編輯GitHub上的文件。
這時我就靈光一閃，耶，既然可以用HackMD push筆記到GitHub上面，那我是不是就可以用HackMD來編輯我之前用GitHub Pages內建的Jekyll架的部落格了呢!
原先的部落格有幾個讓我不滿意的地方:
 只能用git push的方式更新文章，所以有很多限制  一定要在電腦上操作，手機無法 沒有安裝git的電腦無法 就算裝了git的電腦還是要經過一番設定才能正常更新文章   嘗試了幾個本機端的MarkDown編輯器，都沒有比較滿意的  如果能用HackMD來編輯文章的話，可以解決很多的問題:
 HackMD是web端的應用程式，完全可以跨平台操作 做為一個MarkDown編輯器，它堪稱完美，而且開發團隊活躍，常常推出令人耳目一新的功能 原本在HackMD上面就打了很多筆記，如果可以與部落格同步就可以無痛轉移這些文章到部落格上  但是，事與願違，經過一番嘗試後發現有個問題。雖然文章可以正常使用HackMD push到GitHub上面，但是因為用GitHub APP進行push的緣故，所以無法觸發GitHub Pages內建的Jekyll Build功能，如果要觸發build的話，需要有verified email的使用者才行(參考官方文件)。
我想的到的解法是用一隻爬蟲(或api，如果github有提供的話)一直監控這個repository，一旦發現有人push東西上去，就重複push一個空白的commit來觸發build。理論上可行，但是感覺很麻煩。
於是乎我到HackMD的粉專發問，小編給我的回應是只能用CI/CD工具進行build，當下看了真是一頭霧水，以前有聽過CI/CD的工具，但一直搞不懂那是做啥用的。
經過一番折騰才讓我研究出來，其實小編的意思是讓我用CI/CD工具對GitHub進行監控，如果有人push東西上去，CI/CD就會把東西clone下來，做好local build之後，再把東西deploy到GitHub上面。這就不是使用GitHub Pages自帶的Jekyll build功能了，而是全部自己來。
總之，搞了一整天總算是成功弄出來了，以下是教學，正文開始~
 待更新&amp;hellip;</description>
    </item>
    
    <item>
      <title>基本配色-split-complementary color scheme</title>
      <link>http://netjagaimo.github.io/blog_life/2018-07-31-split_complementary_color_schema/</link>
      <pubDate>Tue, 31 Jul 2018 12:00:00 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/blog_life/2018-07-31-split_complementary_color_schema/</guid>
      <description>不知道該放哪類，就放在程式設計吧!畢竟是跟網站規劃有關的。
最近在玩freecodecamp，在裡面看到一個覺得挺有用的配色法 split-complementary color scheme，中文叫做補色分割方案，這是其中一種讓配色看起來協調的方法。
首先，甚麼是補色，補色簡單來說就是色盤中一個顏色正對面的顏色，如果以基本色跟補色作為配色，會有種很強烈的感覺。
而補色分割，就是說，先選擇一個基本色，之後選擇它的補色的兩邊的顏色，舉例而言，紅色的補色是Cyan，所以我們要選擇的是Azure以及Spring Green。
這邊實際用div切三塊給大家看看感覺如何。
See the Pen split-complementary color scheme by Sam Yang (@netjagaimo) on CodePen.
 </description>
    </item>
    
    <item>
      <title>Java起手式</title>
      <link>http://netjagaimo.github.io/blog_life/2018-07-30-java_start/</link>
      <pubDate>Mon, 30 Jul 2018 12:00:00 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/blog_life/2018-07-30-java_start/</guid>
      <description>一個標準的java起手式如下:
1 2 3 4 5  public class HelloWorld { public static void main(String[] args) { System.out.println(&amp;#34;Hello! World!&amp;#34;); } }   剛開始學的時候，都傻傻地照著寫，但都不知道它是什麼意思，直到最近查到一篇Oracle的文章之後才知道其原理為何。
第一行的class就是java的基本單位，應該沒什麼好講的，重點在第二行的public static void main(String[] args)，剛開始學的時候一直搞不懂他到底為何要這樣寫，查了老半天也看不出個所以然。
首先，public static 應該很好懂，因為要被別人呼叫一定要是public，而因為是應用程式的entry point，也就是入口的部分，一定要一開始就存在，所以static也很好懂，主要是後面那個String[] args的參數，真的很詭異，而這個其實就是拿來「給使用者輸入所選擇功能」用的。
舉例而言，如果我們今天在linux系統下要列出檔案列表要使用&amp;quot;ls&amp;quot;這個應用程式，而如果要連同隱藏檔一起列出來就要在ls後面加上-a的參數，而這個-a就是讀進String[] args的參數，根據讀進來的參數，程式再去作出相應的動作，就是這個用法，搞了老半天終於懂了。
參考資料:
Lesson: A Closer Look at the &amp;ldquo;Hello World!&amp;rdquo; Application, Oracle. 2018/7/30, from: https://docs.oracle.com/javase/tutorial/getStarted/application/#MAIN
第六章、Linux 檔案與目錄管理，鳥哥的LINUX私房菜。2018/07/30，檢自:
http://linux.vbird.org/linux_basic/0220filemanager.php#ls</description>
    </item>
    
  </channel>
</rss>